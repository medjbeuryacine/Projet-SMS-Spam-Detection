name: 🚀 SpamShield CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.10"
  HF_SPACE_NAME: "spamshield-sms-detection"

jobs:
  test:
    name: 🧪 Tests et Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: 📦 Cache des dépendances
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: 📋 Installation des dépendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest flake8 black isort
          
      - name: 🔍 Linting avec flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true
        
      - name: 🎨 Vérification du formatage
        run: |
          black --check --diff . || echo "Formatage à améliorer"
          isort --check-only --diff . || echo "Imports à organiser"
        continue-on-error: true
        
      - name: 🧪 Tests unitaires
        run: |
          python -c '
          import sys
          sys.path.append(".")
          
          # Test import app.py seulement
          try:
              from app import SpamShieldModels
              print("✅ Import app.py réussi")
          except Exception as e:
              print(f"❌ Erreur import app.py: {e}")
              sys.exit(1)
          
          # Test Few-Shot (pas besoin de modèles)
          try:
              spam_shield = SpamShieldModels()
              result, conf = spam_shield.few_shot_predict("FREE PRIZE WIN NOW!")
              print(f"✅ Test Few-Shot: {result} (confidence: {conf:.2f})")
              assert "Spam" in result or "Ham" in result
              print("✅ Tests passent!")
          except Exception as e:
              print(f"❌ Erreur test Few-Shot: {e}")
              sys.exit(1)
          
          # Test que les fichiers modèles existent
          import os
          if os.path.exists("models/fine_tuned_model/model.safetensors"):
              print("✅ Modèle fine-tuned trouvé")
          else:
              print("⚠️ Pas de modèle fine-tuned (utilisera fallback)")
              
          if os.path.exists("models/model_info.pkl"):
              print("✅ Métadonnées trouvées")
          else:
              print("⚠️ Pas de métadonnées")
          '
          
      - name: 📊 Rapport de test
        run: |
          echo "## 📊 Résultats des Tests" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Syntaxe Python validée" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Imports fonctionnels" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Few-Shot model testé" >> $GITHUB_STEP_SUMMARY

  build:
    name: 🔨 Build et Préparation
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: 📦 Installation des dépendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: 🏗️ Vérification des modèles
        run: |
            echo "📦 Vérification des modèles existants..."
            if [ -d "models/" ]; then
                echo "✅ Dossier models/ trouvé"
                ls -la models/
            else
                echo "⚠️ Pas de dossier models/ (utilisation des fallbacks)"
            fi
            echo "✅ Modèles prêts pour le déploiement"
          
