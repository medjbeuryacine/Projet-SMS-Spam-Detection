name: 🚀 SpamShield CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.10"
  HF_SPACE_NAME: "spamshield-sms-detection"

jobs:
  test:
    name: 🧪 Tests et Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: 📦 Cache des dépendances
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: 📋 Installation des dépendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest flake8 black isort
          
      - name: 🔍 Linting avec flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true
        
      - name: 🎨 Vérification du formatage
        run: |
          black --check --diff . || echo "Formatage à améliorer"
          isort --check-only --diff . || echo "Imports à organiser"
        continue-on-error: true
        
      - name: 🧪 Tests unitaires
        run: |
          python -c '
          import sys
          sys.path.append(".")
          
          # Test import app.py seulement
          try:
              from app import SpamShieldModels
              print("✅ Import app.py réussi")
          except Exception as e:
              print(f"❌ Erreur import app.py: {e}")
              sys.exit(1)
          
          # Test Few-Shot (pas besoin de modèles)
          try:
              spam_shield = SpamShieldModels()
              result, conf = spam_shield.few_shot_predict("FREE PRIZE WIN NOW!")
              print(f"✅ Test Few-Shot: {result} (confidence: {conf:.2f})")
              assert "Spam" in result or "Ham" in result
              print("✅ Tests passent!")
          except Exception as e:
              print(f"❌ Erreur test Few-Shot: {e}")
              sys.exit(1)
          
          # Test que les fichiers modèles existent
          import os
          if os.path.exists("models/fine_tuned_model/model.safetensors"):
              print("✅ Modèle fine-tuned trouvé")
          else:
              print("⚠️ Pas de modèle fine-tuned (utilisera fallback)")
              
          if os.path.exists("models/model_info.pkl"):
              print("✅ Métadonnées trouvées")
          else:
              print("⚠️ Pas de métadonnées")
          '
          
      - name: 📊 Rapport de test
        run: |
          echo "## 📊 Résultats des Tests" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Syntaxe Python validée" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Imports fonctionnels" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Few-Shot model testé" >> $GITHUB_STEP_SUMMARY

  build:
    name: 🔨 Build et Préparation
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: 📦 Installation des dépendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: 🏗️ Vérification des modèles
        run: |
            echo "📦 Vérification des modèles existants..."
            if [ -d "models/" ]; then
                echo "✅ Dossier models/ trouvé"
                ls -la models/
            else
                echo "⚠️ Pas de dossier models/ (utilisation des fallbacks)"
            fi
            echo "✅ Modèles prêts pour le déploiement"
          
      - name: 📁 Préparer l'artefact de déploiement
        run: |
          mkdir -p deploy
          cp app.py deploy/
          cp requirements.txt deploy/
          cp README.md deploy/
          cp -r models deploy/ 2>/dev/null || echo "Pas de dossier models (normal)"
          
          # Optimiser pour HF Spaces
          cat > deploy/app_temp.py << 'EOF'
          import os
          os.environ["TOKENIZERS_PARALLELISM"] = "false"
          EOF
          cat deploy/app_temp.py deploy/app.py > deploy/app_final.py
          mv deploy/app_final.py deploy/app.py
          rm deploy/app_temp.py
          
          # Modifier server config pour HF Spaces
          sed -i 's/server_name="127.0.0.1"/server_name="0.0.0.0"/g' deploy/app.py
          
      - name: 📤 Upload des artefacts
        uses: actions/upload-artifact@v4
        with:
          name: spamshield-deploy
          path: deploy/
          retention-days: 7

  deploy:
    name: 🚀 Déploiement Hugging Face Spaces
    runs-on: ubuntu-latest
    needs: [test, build]
    if: false
    
    steps:
      - name: 📥 Télécharger les artefacts
        uses: actions/download-artifact@v4
        with:
          name: spamshield-deploy
          path: deploy/
          
      - name: 🔧 Setup Git et Hugging Face
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          pip install huggingface_hub
          
      - name: 🚀 Déploiement sur HF Spaces
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          python -c '
          import os
          from huggingface_hub import HfApi
          from pathlib import Path
          
          # Configuration
          token = os.environ.get("HF_TOKEN")
          space_name = "${{ env.HF_SPACE_NAME }}"
          username = "${{ github.actor }}"
          
          if not token:
              print("❌ HF_TOKEN non configuré dans les secrets GitHub")
              print("📝 Configurez votre token HF dans Settings > Secrets > Actions")
              exit(1)
          
          try:
              # Initialiser API
              api = HfApi(token=token)
              space_id = f"{username}/{space_name}"
              
              # Créer le Space
              try:
                  api.create_repo(
                      repo_id=space_id,
                      token=token,
                      repo_type="space",
                      space_sdk="gradio",
                      private=False
                  )
                  print(f"✅ Space créé: https://huggingface.co/spaces/{space_id}")
              except Exception as e:
                  print(f"⚠️ Space existe déjà ou erreur: {e}")
              
              # Upload fichiers
              deploy_path = Path("deploy")
              for file_path in deploy_path.rglob("*"):
                  if file_path.is_file():
                      relative_path = file_path.relative_to(deploy_path)
                      print(f"📤 Upload: {relative_path}")
                      api.upload_file(
                          path_or_fileobj=str(file_path),
                          path_in_repo=str(relative_path),
                          repo_id=space_id,
                          repo_type="space",
                          token=token
                      )
              
              print(f"🎉 Déploiement réussi!")
              print(f"🌐 URL: https://huggingface.co/spaces/{space_id}")
              
          except Exception as e:
              print(f"❌ Erreur de déploiement: {e}")
              exit(1)
          '

  post-deploy:
    name: 📋 Tests Post-Déploiement
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: ⏱️ Attendre le déploiement
        run: |
          echo "⏱️ Attente de 60 secondes pour le déploiement..."
          sleep 60
          
      - name: 🌐 Test de l'endpoint
        run: |
          SPACE_URL="https://huggingface.co/spaces/${{ github.actor }}/${{ env.HF_SPACE_NAME }}"
          echo "🔍 Test de l'URL: $SPACE_URL"
          
          if curl -s -f "$SPACE_URL" > /dev/null; then
              echo "✅ Application accessible"
          else
              echo "⚠️ Application pas encore accessible (normal après déploiement)"
          fi
          
      - name: 📊 Résumé du déploiement
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ## 🚀 Déploiement Terminé
          
          ### 📋 Informations
          - **Space**: ${{ env.HF_SPACE_NAME }}
          - **URL**: https://huggingface.co/spaces/${{ github.actor }}/${{ env.HF_SPACE_NAME }}
          - **Commit**: ${{ github.sha }}
          - **Branche**: ${{ github.ref_name }}
          
          ### ✅ Jobs Exécutés
          - 🧪 Tests et validation
          - 🔨 Build et préparation
          - 🚀 Déploiement HF Spaces
          - 📋 Tests post-déploiement
          
          🎉 **SpamShield est maintenant en ligne !**
          EOF

  cleanup:
    name: 🧹 Nettoyage
    runs-on: ubuntu-latest
    needs: [test, build, deploy, post-deploy]
    if: always()
    
    steps:
      - name: 🗑️ Nettoyage des artefacts anciens
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner,
              repo,
              per_page: 100
            });
            
            const toDelete = artifacts.data.artifacts
              .filter(a => a.name === 'spamshield-deploy')
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
              .slice(5);
            
            for (const artifact of toDelete) {
              await github.rest.actions.deleteArtifact({
                owner,
                repo,
                artifact_id: artifact.id
              });
              console.log(`🗑️ Supprimé: ${artifact.name} (${artifact.created_at})`);
            }